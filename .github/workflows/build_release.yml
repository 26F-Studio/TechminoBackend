name: Build Releases
on:
  workflow_dispatch:
    inputs:
      version_code:
        description: "Version Code"
        required: true
      version_name:
        description: "Version Name"
        required: true
      body:
        description: "Description"
        default: "New release"
        required: true
env:
  BUILD_TYPE: Release
jobs:
  windows_latest:
    name: Windows Latest
    runs-on: windows-latest
    steps:
      - name: Checkout TechminoBackend
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.ACCESS_TOKEN }}
          submodules: recursive

      - name: Setup Vcpkg
        id: setup_vcpkg
        uses: lukka/run-vcpkg@v6
        with:
          vcpkgDirectory: "${{github.workspace}}/vcpkg"
          vcpkgTriplet: "x64-windows"
          vcpkgArguments: "drogon cryptopp"

      - name: Config Database Models
        shell: bash
        working-directory: ${{github.workspace}}
        run: |
          ./vcpkg/installed/x64-windows/tools/drogon/drogon_ctl.exe create model ./lib_models/Models
          y

      - name: Cmake TechminoBackend
        uses: lukka/run-cmake@v3
        with:
          cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
          useVcpkgToolchainFile: true
          cmakeAppendedArgs: "-DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}"
          buildWithCMake: true
          buildDirectory: "${{github.workspace}}/build"
          buildWithCMakeArgs: "--config ${{env.BUILD_TYPE}} --parallel 2"

      - name: Pack TechminoBackend
        working-directory: ${{github.workspace}}
        shell: bash
        run: 7z a windows-x64.zip -r ./build/Release

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          tag_name: ${{github.event.inputs.version_code}}
          release_name: ${{github.event.inputs.version_name}}
          body: ${{github.event.inputs.body}}
          draft: false
          prerelease: false

      - name: Set Upload URL
        uses: noobly314/share-data@v1
        with:
          share-id: upload_url
          mode: set
          key: upload_url
          value: ${{steps.create_release.outputs.upload_url}}

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          upload_url: ${{steps.create_release.outputs.upload_url}}
          asset_path: ./windows-x64.zip
          asset_name: windows-x64.zip
          asset_content_type: application/zip

  ubuntu_latest:
    needs: windows_latest
    name: Ubuntu Latest
    runs-on: ubuntu-latest
    steps:
      - name: Install Dependencies
        run: sudo apt update && sudo apt install git gcc g++ cmake libjsoncpp-dev uuid-dev openssl libssl-dev zlib1g-dev libc-ares-dev libbrotli-dev postgresql-all libmariadb-dev libsqlite3-dev -y

      - name: Checkout TechminoBackend source code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.ACCESS_TOKEN }}
          submodules: recursive

      - name: Cache CryptoPP
        id: cache_cryptopp
        uses: actions/cache@v2
        with:
          path: ${{github.workspace}}/cryptopp-src
          key: ${{ runner.os }}-cryptopp-cache

      - name: Checkout CryptoPP source code
        if: steps.cache_cryptopp.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          repository: weidai11/cryptopp
          submodules: recursive
          fetch-depth: 0
          path: cryptopp-src

      - name: Get CMake config files
        if: steps.cache_cryptopp.outputs.cache-hit != 'true'
        shell: bash
        working-directory: ${{github.workspace}}/cryptopp-src
        run: |
          wget -O CMakeLists.txt https://raw.githubusercontent.com/noloader/cryptopp-cmake/master/CMakeLists.txt
          wget -O cryptopp-config.cmake https://raw.githubusercontent.com/noloader/cryptopp-cmake/master/cryptopp-config.cmake

      - name: Cmake CryptoPP
        if: steps.cache_cryptopp.outputs.cache-hit != 'true'
        shell: bash
        working-directory: ${{github.workspace}}/cryptopp-src
        run: |
          mkdir build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Debug

      - name: Build & install CryptoPP
        if: steps.cache_cryptopp.outputs.cache-hit != 'true'
        working-directory: ${{github.workspace}}/cryptopp-src
        shell: bash
        run: |
          cd build
          sudo make && sudo make install

      - name: Cache Drogon
        id: cache_drogon
        uses: actions/cache@v2
        with:
          path: ${{github.workspace}}/drogon-src
          key: ${{ runner.os }}-drogon-cache

      - name: Checkout Drogon source code
        if: steps.cache_drogon.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          repository: an-tao/drogon
          submodules: recursive
          fetch-depth: 0
          path: drogon-src

      - name: Cmake Drogon
        if: steps.cache_drogon.outputs.cache-hit != 'true'
        shell: bash
        working-directory: ${{github.workspace}}/drogon-src
        run: |
          mkdir build
          cd build
          cmake .. -DPostgreSQL_TYPE_INCLUDE_DIR=/usr/include/postgresql

      - name: Build & install Drogon
        if: steps.cache_drogon.outputs.cache-hit != 'true'
        working-directory: ${{github.workspace}}/drogon-src
        shell: bash
        run: |
          cd build
          sudo make && sudo make install

      - name: Config Database Models
        shell: bash
        working-directory: ${{github.workspace}}/lib_models
        run: |
          cd models
          dg_ctl create model ./
          y

      - name: Cmake TechminoBackend
        shell: bash
        working-directory: ${{github.workspace}}
        run: |
          mkdir build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE

      - name: Build TechminoBackend
        working-directory: ${{github.workspace}}/build
        shell: bash
        run: cmake --build . --config $BUILD_TYPE --parallel 2

      - name: Pack TechminoBackend
        working-directory: ${{github.workspace}}
        shell: bash
        run: zip -r ubuntu.zip ./build

      - name: Get Upload URL
        id: get_upload_url
        uses: noobly314/share-data@v1
        with:
          share-id: upload_url
          mode: get
          key: upload_url

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          upload_url: ${{steps.get_upload_url.outputs.data}}
          asset_path: ./ubuntu.zip
          asset_name: ubuntu.zip
          asset_content_type: application/zip
