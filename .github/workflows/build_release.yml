name: Build Release
on:
  workflow_dispatch:
    inputs:
      version_code:
        description: 'Version Code'
        required: true
      version_name:
        description: 'Version Name'
        required: true
      body:
        description: 'Description'
        default: 'New release'
        required: true
env:
  BUILD_TYPE: Release
jobs:
  ubuntu-latest:
    name: Ubuntu Latest
    runs-on: ubuntu-latest
    steps:
      - name: Install Dependencies
        run: |
          sudo apt update
          sudo apt install libjsoncpp-dev uuid-dev openssl libssl-dev zlib1g-dev postgresql-all libsqlite3-dev
          sudo apt install libbrotli-dev

      - name: Checkout TechminoBackend source code
        uses: actions/checkout@v2

      - name: Cache Drogon
        id: cache_drogon
        uses: actions/cache@v2
        with:
          path: ${{github.workspace}}/drogon-src
          key: ${{ runner.os }}-drogon-cache

      - name: Checkout Drogon source code
        if: steps.cache_drogon.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          repository: an-tao/drogon
          submodules: true
          fetch-depth: 0
          path: drogon-src

      - name: Cmake Drogon
        if: steps.cache_drogon.outputs.cache-hit != 'true'
        shell: bash
        working-directory: ${{github.workspace}}/drogon-src
        run: |
          mkdir build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE

      - name: Build Drogon
        if: steps.cache_drogon.outputs.cache-hit != 'true'
        working-directory: ${{github.workspace}}/drogon-src
        shell: bash
        run: |
          cd build
          sudo make

      - name: Install Drogon
        working-directory: ${{github.workspace}}/drogon-src
        shell: bash
        run: |
          cd build
          sudo make install

      - name: Cmake TechminoBackend
        shell: bash
        working-directory: ${{github.workspace}}
        run: |
          mkdir build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE

      - name: Build TechminoBackend
        working-directory: ${{github.workspace}}/build
        shell: bash
        run: cmake --build . --config $BUILD_TYPE

      - name: Pack TechminoBackend
        working-directory: ${{github.workspace}}
        shell: bash
        run: zip -r release.zip ./build

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          tag_name: ${{github.event.inputs.version_code}}
          release_name: ${{github.event.inputs.version_name}}
          body: ${{github.event.inputs.body}}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          upload_url: ${{steps.create_release.outputs.upload_url}}
          asset_path: ./release.zip
          asset_name: release.zip
          asset_content_type: application/zip