name: Build Releases
on:
  workflow_dispatch:
    inputs:
      version_code:
        description: 'Version Code'
        required: true
      version_name:
        description: 'Version Name'
        required: true
      body:
        description: 'Description'
        default: 'New release'
        required: true
env:
  BUILD_TYPE: Release
jobs:
  windows_latest:
    name: Windows Latest
    runs-on: windows-latest
    steps:
      - name: Checkout TechminoBackend source code
        uses: actions/checkout@v2

      - name: Setup Vcpkg
        id: setup_vcpkg
        uses: lukka/run-vcpkg@v6
        with:
          setupOnly: true
          vcpkgGitCommitId: '981e65ce0ac1f6c86e5a5ded7824db8780173c76'
          vcpkgDirectory: '${{github.workspace}}/vcpkg'

      - name: Install Packages
        id: install_vcpkg
        uses: lukka/run-vcpkg@v6
        with:
          vcpkgGitCommitId: '981e65ce0ac1f6c86e5a5ded7824db8780173c76'
          vcpkgDirectory: '${{github.workspace}}/vcpkg'
          vcpkgTriplet: 'x64-windows'
          vcpkgArguments: 'drogon'

      - name: Cmake TechminoBackend
        uses: lukka/run-cmake@v3
        with:
          cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
          useVcpkgToolchainFile: true
          cmakeAppendedArgs: '-DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}'
          buildWithCMake: true
          buildDirectory: '${{github.workspace}}/build'
          buildWithCMakeArgs: '--config ${{env.BUILD_TYPE}}'

      - name: Pack TechminoBackend
        working-directory: ${{github.workspace}}
        shell: bash
        run: 7z a windows-x64.zip -r ./build/Release

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          tag_name: ${{github.event.inputs.version_code}}
          release_name: ${{github.event.inputs.version_name}}
          body: ${{github.event.inputs.body}}
          draft: false
          prerelease: false

      - name: Set Upload URL
        uses: noobly314/share-data@v1
        with:
          share-id: upload_url
          mode: set
          key: upload_url
          value: ${{steps.create_release.outputs.upload_url}}

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          upload_url: ${{steps.create_release.outputs.upload_url}}
          asset_path: ./windows-x64.zip
          asset_name: windows-x64.zip
          asset_content_type: application/zip

  ubuntu_latest:
    needs: windows_latest
    name: Ubuntu Latest
    runs-on: ubuntu-latest
    steps:
      - name: Cache Dependences
        uses: actions/cache@v1.0.3
        id: cache_dependences
        with:
          path: "~/dependencies"
          key: ${{hashFiles('${{github.workspace}}/main.cc')}}

      - name: Install Dependences
        env:
          CACHE_HIT: ${{steps.cache_dependences.outputs.cache-hit}}
        run: |
          if [[ "$CACHE_HIT" == 'true' ]]; then
            echo 'Restoring caches...'
            sudo cp --verbose --force --recursive ~/dependencies/* /
          else
            sudo apt update
            sudo apt install --yes libjsoncpp-dev uuid-dev openssl libssl-dev zlib1g-dev postgresql-all libsqlite3-dev
            sudo apt install --yes libbrotli-dev
            mkdir -p ~/dependencies

            for dep in libjsoncpp-dev libjsoncpp1; do
              sudo dpkg -L $dep | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/dependencies
            done

            for dep in uuid-dev libuuid1; do
              sudo dpkg -L $dep | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/dependencies
            done

            for dep in openssl libssl-dev libssl1.1; do
              sudo dpkg -L $dep | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/dependencies
            done

            for dep in zlib1g-dev zlib1g; do
              sudo dpkg -L $dep | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/dependencies
            done

            for dep in postgresql-all libecpg-dev libpq-dev postgresql-common postgresql-server-dev-all postgresql-13 postgresql-plperl-13 postgresql-plpython3-13 postgresql-pltcl-13 libtcl8.6; do
              sudo dpkg -L $dep | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/dependencies
            done

            for dep in libecpg-compat3 libecpg6 libpgtypes3; do
              sudo dpkg -L $dep | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/dependencies
            done

            for dep in libpq5 libgssapi-krb5-2 libldap-2.4-2 libcom-err2 libk5crypto3 libkrb5-3 libkrb5support0 libkeyutils1 libgnutls30 libsasl2-2 libgmp10 libhogweed6 libidn2-0 libnettle8 libp11-kit0 libtasn1-6 libunistring2 libsasl2-modules-db libffi7 libdb5.3; do
              sudo dpkg -L $dep | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/dependencies
            done

            for dep in lsb-base perl postgresql-client-common ssl-cert ucf netbase; do
              sudo dpkg -L $dep | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/dependencies
            done

            for dep in perl-base libcrypt1 perl-modules-5.30 libperl5.30 libbz2-1.0 libgdbm-compat4 libgdbm6; do
              sudo dpkg -L $dep | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/dependencies
            done

            for dep in postgresql-server-dev-13 postgresql-client-13 libedit2 libbsd0 libtinfo6; do
              sudo dpkg -L $dep | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/dependencies
            done

            for dep in locales locales-all libc-bin libc-l10n tzdata libicu67 libpam0g libxml2 libxslt1.1 libaudit1 libcap-ng0 liblzma5 libgcrypt20 libaudit-common; do
              sudo dpkg -L $dep | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/dependencies
            done

            for dep in libsqlite3-dev libsqlite3-0; do
              sudo dpkg -L $dep | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/dependencies
            done

            for dep in libbrotli-dev libbrotli1; do
              sudo dpkg -L $dep | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/dependencies
            done
          fi

#      - name: Install Dependencies
#        run: |
#          sudo apt update
#          sudo apt install libjsoncpp-dev uuid-dev openssl libssl-dev zlib1g-dev postgresql-all libsqlite3-dev
#          sudo apt install libbrotli-dev

      - name: Checkout TechminoBackend source code
        uses: actions/checkout@v2

      - name: Cache Drogon
        id: cache_drogon
        uses: actions/cache@v2
        with:
          path: ${{github.workspace}}/drogon-src
          key: ${{ runner.os }}-drogon-cache

      - name: Checkout Drogon source code
        if: steps.cache_drogon.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          repository: an-tao/drogon
          submodules: true
          fetch-depth: 0
          path: drogon-src

      - name: Cmake Drogon
        if: steps.cache_drogon.outputs.cache-hit != 'true'
        shell: bash
        working-directory: ${{github.workspace}}/drogon-src
        run: |
          mkdir build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE

      - name: Build Drogon
        if: steps.cache_drogon.outputs.cache-hit != 'true'
        working-directory: ${{github.workspace}}/drogon-src
        shell: bash
        run: |
          cd build
          sudo make

      - name: Install Drogon
        working-directory: ${{github.workspace}}/drogon-src
        shell: bash
        run: |
          cd build
          sudo make install

      - name: Cmake TechminoBackend
        shell: bash
        working-directory: ${{github.workspace}}
        run: |
          mkdir build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE

      - name: Build TechminoBackend
        working-directory: ${{github.workspace}}/build
        shell: bash
        run: cmake --build . --config $BUILD_TYPE

      - name: Pack TechminoBackend
        working-directory: ${{github.workspace}}
        shell: bash
        run: zip -r ubuntu.zip ./build

      - name: Get Upload URL
        id: get_upload_url
        uses: noobly314/share-data@v1
        with:
          share-id: upload_url
          mode: get
          key: upload_url

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          upload_url: ${{steps.get_upload_url.outputs.data}}
          asset_path: ./ubuntu.zip
          asset_name: ubuntu.zip
          asset_content_type: application/zip