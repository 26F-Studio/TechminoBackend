/**
 *
 *  App.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "App.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::Techmino;

const std::string App::Cols::_version_code = "version_code";
const std::string App::Cols::_version_name = "version_name";
const std::string App::Cols::_version_content = "version_content";
const std::string App::primaryKeyName = "version_code";
const bool App::hasPrimaryKey = true;
const std::string App::tableName = "app";

const std::vector<typename App::MetaData> App::metaData_={
{"version_code","int32_t","integer",4,0,1,1},
{"version_name","std::string","text",0,0,0,0},
{"version_content","std::string","text",0,0,0,0}
};
const std::string &App::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
App::App(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["version_code"].isNull())
        {
            versionCode_=std::make_shared<int32_t>(r["version_code"].as<int32_t>());
        }
        if(!r["version_name"].isNull())
        {
            versionName_=std::make_shared<std::string>(r["version_name"].as<std::string>());
        }
        if(!r["version_content"].isNull())
        {
            versionContent_=std::make_shared<std::string>(r["version_content"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 3 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            versionCode_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            versionName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            versionContent_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

App::App(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            versionCode_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            versionName_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            versionContent_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
}

App::App(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("version_code"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["version_code"].isNull())
        {
            versionCode_=std::make_shared<int32_t>((int32_t)pJson["version_code"].asInt64());
        }
    }
    if(pJson.isMember("version_name"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["version_name"].isNull())
        {
            versionName_=std::make_shared<std::string>(pJson["version_name"].asString());
        }
    }
    if(pJson.isMember("version_content"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["version_content"].isNull())
        {
            versionContent_=std::make_shared<std::string>(pJson["version_content"].asString());
        }
    }
}

void App::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            versionCode_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            versionName_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            versionContent_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
}
                                                                    
void App::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("version_code"))
    {
        if(!pJson["version_code"].isNull())
        {
            versionCode_=std::make_shared<int32_t>((int32_t)pJson["version_code"].asInt64());
        }
    }
    if(pJson.isMember("version_name"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["version_name"].isNull())
        {
            versionName_=std::make_shared<std::string>(pJson["version_name"].asString());
        }
    }
    if(pJson.isMember("version_content"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["version_content"].isNull())
        {
            versionContent_=std::make_shared<std::string>(pJson["version_content"].asString());
        }
    }
}

const int32_t &App::getValueOfVersionCode() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(versionCode_)
        return *versionCode_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &App::getVersionCode() const noexcept
{
    return versionCode_;
}
void App::setVersionCode(const int32_t &pVersionCode) noexcept
{
    versionCode_ = std::make_shared<int32_t>(pVersionCode);
    dirtyFlag_[0] = true;
}



const typename App::PrimaryKeyType & App::getPrimaryKey() const
{
    assert(versionCode_);
    return *versionCode_;
}

const std::string &App::getValueOfVersionName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(versionName_)
        return *versionName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &App::getVersionName() const noexcept
{
    return versionName_;
}
void App::setVersionName(const std::string &pVersionName) noexcept
{
    versionName_ = std::make_shared<std::string>(pVersionName);
    dirtyFlag_[1] = true;
}
void App::setVersionName(std::string &&pVersionName) noexcept
{
    versionName_ = std::make_shared<std::string>(std::move(pVersionName));
    dirtyFlag_[1] = true;
}


void App::setVersionNameToNull() noexcept
{
    versionName_.reset();
    dirtyFlag_[1] = true;
}


const std::string &App::getValueOfVersionContent() const noexcept
{
    const static std::string defaultValue = std::string();
    if(versionContent_)
        return *versionContent_;
    return defaultValue;
}
const std::shared_ptr<std::string> &App::getVersionContent() const noexcept
{
    return versionContent_;
}
void App::setVersionContent(const std::string &pVersionContent) noexcept
{
    versionContent_ = std::make_shared<std::string>(pVersionContent);
    dirtyFlag_[2] = true;
}
void App::setVersionContent(std::string &&pVersionContent) noexcept
{
    versionContent_ = std::make_shared<std::string>(std::move(pVersionContent));
    dirtyFlag_[2] = true;
}


void App::setVersionContentToNull() noexcept
{
    versionContent_.reset();
    dirtyFlag_[2] = true;
}


void App::updateId(const uint64_t id)
{
}

const std::vector<std::string> &App::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "version_code",
        "version_name",
        "version_content"
    };
    return inCols;
}

void App::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getVersionCode())
        {
            binder << getValueOfVersionCode();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getVersionName())
        {
            binder << getValueOfVersionName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getVersionContent())
        {
            binder << getValueOfVersionContent();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> App::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    return ret;
}

void App::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getVersionCode())
        {
            binder << getValueOfVersionCode();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getVersionName())
        {
            binder << getValueOfVersionName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getVersionContent())
        {
            binder << getValueOfVersionContent();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value App::toJson() const
{
    Json::Value ret;
    if(getVersionCode())
    {
        ret["version_code"]=getValueOfVersionCode();
    }
    else
    {
        ret["version_code"]=Json::Value();
    }
    if(getVersionName())
    {
        ret["version_name"]=getValueOfVersionName();
    }
    else
    {
        ret["version_name"]=Json::Value();
    }
    if(getVersionContent())
    {
        ret["version_content"]=getValueOfVersionContent();
    }
    else
    {
        ret["version_content"]=Json::Value();
    }
    return ret;
}

Json::Value App::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 3)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getVersionCode())
            {
                ret[pMasqueradingVector[0]]=getValueOfVersionCode();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getVersionName())
            {
                ret[pMasqueradingVector[1]]=getValueOfVersionName();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getVersionContent())
            {
                ret[pMasqueradingVector[2]]=getValueOfVersionContent();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getVersionCode())
    {
        ret["version_code"]=getValueOfVersionCode();
    }
    else
    {
        ret["version_code"]=Json::Value();
    }
    if(getVersionName())
    {
        ret["version_name"]=getValueOfVersionName();
    }
    else
    {
        ret["version_name"]=Json::Value();
    }
    if(getVersionContent())
    {
        ret["version_content"]=getValueOfVersionContent();
    }
    else
    {
        ret["version_content"]=Json::Value();
    }
    return ret;
}

bool App::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("version_code"))
    {
        if(!validJsonOfField(0, "version_code", pJson["version_code"], err, true))
            return false;
    }
    else
    {
        err="The version_code column cannot be null";
        return false;
    }
    if(pJson.isMember("version_name"))
    {
        if(!validJsonOfField(1, "version_name", pJson["version_name"], err, true))
            return false;
    }
    if(pJson.isMember("version_content"))
    {
        if(!validJsonOfField(2, "version_content", pJson["version_content"], err, true))
            return false;
    }
    return true;
}
bool App::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                             const std::vector<std::string> &pMasqueradingVector,
                                             std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty())
    {
        if(pJson.isMember(pMasqueradingVector[0]))
        {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[1].empty())
    {
        if(pJson.isMember(pMasqueradingVector[1]))
        {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[2].empty())
    {
        if(pJson.isMember(pMasqueradingVector[2]))
        {
            if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                return false;
        }
    }
    return true;
}
bool App::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("version_code"))
    {
        if(!validJsonOfField(0, "version_code", pJson["version_code"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("version_name"))
    {
        if(!validJsonOfField(1, "version_name", pJson["version_name"], err, false))
            return false;
    }
    if(pJson.isMember("version_content"))
    {
        if(!validJsonOfField(2, "version_content", pJson["version_content"], err, false))
            return false;
    }
    return true;
}
bool App::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                           const std::vector<std::string> &pMasqueradingVector,
                                           std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
            return false;
    }
    return true;
}
bool App::validJsonOfField(size_t index,
                           const std::string &fieldName,
                           const Json::Value &pJson, 
                           std::string &err, 
                           bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
