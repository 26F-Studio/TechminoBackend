/**
 *
 *  Auth.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Auth.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::Techmino;

const std::string Auth::Cols::__id = "_id";
const std::string Auth::Cols::_email = "email";
const std::string Auth::Cols::_password = "password";
const std::string Auth::Cols::_auth_token = "auth_token";
const std::string Auth::Cols::_access_token = "access_token";
const std::string Auth::Cols::_auth_token_expire_time = "auth_token_expire_time";
const std::string Auth::Cols::_access_token_expire_time = "access_token_expire_time";
const std::string Auth::Cols::_qq = "qq";
const std::string Auth::primaryKeyName = "_id";
const bool Auth::hasPrimaryKey = true;
const std::string Auth::tableName = "auth";

const std::vector<typename Auth::MetaData> Auth::metaData_ = {
        {"_id",                      "int64_t",     "bigint", 8, 1, 1, 1},
        {"email",                    "std::string", "text",   0, 0, 0, 1},
        {"password",                 "std::string", "text",   0, 0, 0, 1},
        {"auth_token",               "std::string", "text",   0, 0, 0, 0},
        {"access_token",             "std::string", "text",   0, 0, 0, 0},
        {"auth_token_expire_time",   "std::string", "text",   0, 0, 0, 0},
        {"access_token_expire_time", "std::string", "text",   0, 0, 0, 0},
        {"qq",                       "int64_t",     "bigint", 8, 0, 0, 1}
};

const std::string &Auth::getColumnName(size_t index) noexcept(false) {
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}

Auth::Auth(const Row &r, const ssize_t indexOffset) noexcept {
    if (indexOffset < 0) {
        if (!r["_id"].isNull()) {
            Id_ = std::make_shared<int64_t>(r["_id"].as<int64_t>());
        }
        if (!r["email"].isNull()) {
            email_ = std::make_shared<std::string>(r["email"].as<std::string>());
        }
        if (!r["password"].isNull()) {
            password_ = std::make_shared<std::string>(r["password"].as<std::string>());
        }
        if (!r["auth_token"].isNull()) {
            authToken_ = std::make_shared<std::string>(r["auth_token"].as<std::string>());
        }
        if (!r["access_token"].isNull()) {
            accessToken_ = std::make_shared<std::string>(r["access_token"].as<std::string>());
        }
        if (!r["auth_token_expire_time"].isNull()) {
            authTokenExpireTime_ = std::make_shared<std::string>(r["auth_token_expire_time"].as<std::string>());
        }
        if (!r["access_token_expire_time"].isNull()) {
            accessTokenExpireTime_ = std::make_shared<std::string>(r["access_token_expire_time"].as<std::string>());
        }
        if (!r["qq"].isNull()) {
            qq_ = std::make_shared<int64_t>(r["qq"].as<int64_t>());
        }
    } else {
        size_t offset = (size_t) indexOffset;
        if (offset + 8 > r.size()) {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if (!r[index].isNull()) {
            Id_ = std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 1;
        if (!r[index].isNull()) {
            email_ = std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if (!r[index].isNull()) {
            password_ = std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if (!r[index].isNull()) {
            authToken_ = std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if (!r[index].isNull()) {
            accessToken_ = std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if (!r[index].isNull()) {
            authTokenExpireTime_ = std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if (!r[index].isNull()) {
            accessTokenExpireTime_ = std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if (!r[index].isNull()) {
            qq_ = std::make_shared<int64_t>(r[index].as<int64_t>());
        }
    }

}

Auth::Auth(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false) {
    if (pMasqueradingVector.size() != 8) {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if (!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0])) {
        dirtyFlag_[0] = true;
        if (!pJson[pMasqueradingVector[0]].isNull()) {
            Id_ = std::make_shared<int64_t>((int64_t) pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if (!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1])) {
        dirtyFlag_[1] = true;
        if (!pJson[pMasqueradingVector[1]].isNull()) {
            email_ = std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if (!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2])) {
        dirtyFlag_[2] = true;
        if (!pJson[pMasqueradingVector[2]].isNull()) {
            password_ = std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if (!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3])) {
        dirtyFlag_[3] = true;
        if (!pJson[pMasqueradingVector[3]].isNull()) {
            authToken_ = std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if (!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4])) {
        dirtyFlag_[4] = true;
        if (!pJson[pMasqueradingVector[4]].isNull()) {
            accessToken_ = std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if (!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5])) {
        dirtyFlag_[5] = true;
        if (!pJson[pMasqueradingVector[5]].isNull()) {
            authTokenExpireTime_ = std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if (!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6])) {
        dirtyFlag_[6] = true;
        if (!pJson[pMasqueradingVector[6]].isNull()) {
            accessTokenExpireTime_ = std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if (!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7])) {
        dirtyFlag_[7] = true;
        if (!pJson[pMasqueradingVector[7]].isNull()) {
            qq_ = std::make_shared<int64_t>((int64_t) pJson[pMasqueradingVector[7]].asInt64());
        }
    }
}

Auth::Auth(const Json::Value &pJson) noexcept(false) {
    if (pJson.isMember("_id")) {
        dirtyFlag_[0] = true;
        if (!pJson["_id"].isNull()) {
            Id_ = std::make_shared<int64_t>((int64_t) pJson["_id"].asInt64());
        }
    }
    if (pJson.isMember("email")) {
        dirtyFlag_[1] = true;
        if (!pJson["email"].isNull()) {
            email_ = std::make_shared<std::string>(pJson["email"].asString());
        }
    }
    if (pJson.isMember("password")) {
        dirtyFlag_[2] = true;
        if (!pJson["password"].isNull()) {
            password_ = std::make_shared<std::string>(pJson["password"].asString());
        }
    }
    if (pJson.isMember("auth_token")) {
        dirtyFlag_[3] = true;
        if (!pJson["auth_token"].isNull()) {
            authToken_ = std::make_shared<std::string>(pJson["auth_token"].asString());
        }
    }
    if (pJson.isMember("access_token")) {
        dirtyFlag_[4] = true;
        if (!pJson["access_token"].isNull()) {
            accessToken_ = std::make_shared<std::string>(pJson["access_token"].asString());
        }
    }
    if (pJson.isMember("auth_token_expire_time")) {
        dirtyFlag_[5] = true;
        if (!pJson["auth_token_expire_time"].isNull()) {
            authTokenExpireTime_ = std::make_shared<std::string>(pJson["auth_token_expire_time"].asString());
        }
    }
    if (pJson.isMember("access_token_expire_time")) {
        dirtyFlag_[6] = true;
        if (!pJson["access_token_expire_time"].isNull()) {
            accessTokenExpireTime_ = std::make_shared<std::string>(pJson["access_token_expire_time"].asString());
        }
    }
    if (pJson.isMember("qq")) {
        dirtyFlag_[7] = true;
        if (!pJson["qq"].isNull()) {
            qq_ = std::make_shared<int64_t>((int64_t) pJson["qq"].asInt64());
        }
    }
}

void Auth::updateByMasqueradedJson(const Json::Value &pJson,
                                   const std::vector<std::string> &pMasqueradingVector) noexcept(false) {
    if (pMasqueradingVector.size() != 8) {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if (!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0])) {
        if (!pJson[pMasqueradingVector[0]].isNull()) {
            Id_ = std::make_shared<int64_t>((int64_t) pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if (!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1])) {
        dirtyFlag_[1] = true;
        if (!pJson[pMasqueradingVector[1]].isNull()) {
            email_ = std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if (!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2])) {
        dirtyFlag_[2] = true;
        if (!pJson[pMasqueradingVector[2]].isNull()) {
            password_ = std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if (!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3])) {
        dirtyFlag_[3] = true;
        if (!pJson[pMasqueradingVector[3]].isNull()) {
            authToken_ = std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if (!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4])) {
        dirtyFlag_[4] = true;
        if (!pJson[pMasqueradingVector[4]].isNull()) {
            accessToken_ = std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if (!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5])) {
        dirtyFlag_[5] = true;
        if (!pJson[pMasqueradingVector[5]].isNull()) {
            authTokenExpireTime_ = std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if (!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6])) {
        dirtyFlag_[6] = true;
        if (!pJson[pMasqueradingVector[6]].isNull()) {
            accessTokenExpireTime_ = std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if (!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7])) {
        dirtyFlag_[7] = true;
        if (!pJson[pMasqueradingVector[7]].isNull()) {
            qq_ = std::make_shared<int64_t>((int64_t) pJson[pMasqueradingVector[7]].asInt64());
        }
    }
}

void Auth::updateByJson(const Json::Value &pJson) noexcept(false) {
    if (pJson.isMember("_id")) {
        if (!pJson["_id"].isNull()) {
            Id_ = std::make_shared<int64_t>((int64_t) pJson["_id"].asInt64());
        }
    }
    if (pJson.isMember("email")) {
        dirtyFlag_[1] = true;
        if (!pJson["email"].isNull()) {
            email_ = std::make_shared<std::string>(pJson["email"].asString());
        }
    }
    if (pJson.isMember("password")) {
        dirtyFlag_[2] = true;
        if (!pJson["password"].isNull()) {
            password_ = std::make_shared<std::string>(pJson["password"].asString());
        }
    }
    if (pJson.isMember("auth_token")) {
        dirtyFlag_[3] = true;
        if (!pJson["auth_token"].isNull()) {
            authToken_ = std::make_shared<std::string>(pJson["auth_token"].asString());
        }
    }
    if (pJson.isMember("access_token")) {
        dirtyFlag_[4] = true;
        if (!pJson["access_token"].isNull()) {
            accessToken_ = std::make_shared<std::string>(pJson["access_token"].asString());
        }
    }
    if (pJson.isMember("auth_token_expire_time")) {
        dirtyFlag_[5] = true;
        if (!pJson["auth_token_expire_time"].isNull()) {
            authTokenExpireTime_ = std::make_shared<std::string>(pJson["auth_token_expire_time"].asString());
        }
    }
    if (pJson.isMember("access_token_expire_time")) {
        dirtyFlag_[6] = true;
        if (!pJson["access_token_expire_time"].isNull()) {
            accessTokenExpireTime_ = std::make_shared<std::string>(pJson["access_token_expire_time"].asString());
        }
    }
    if (pJson.isMember("qq")) {
        dirtyFlag_[7] = true;
        if (!pJson["qq"].isNull()) {
            qq_ = std::make_shared<int64_t>((int64_t) pJson["qq"].asInt64());
        }
    }
}

const int64_t &Auth::getValueOfId() const noexcept {
    const static int64_t defaultValue = int64_t();
    if (Id_)
        return *Id_;
    return defaultValue;
}

const std::shared_ptr<int64_t> &Auth::getId() const noexcept {
    return Id_;
}

void Auth::setId(const int64_t &pId) noexcept {
    Id_ = std::make_shared<int64_t>(pId);
    dirtyFlag_[0] = true;
}


const typename Auth::PrimaryKeyType &Auth::getPrimaryKey() const {
    assert(Id_);
    return *Id_;
}

const std::string &Auth::getValueOfEmail() const noexcept {
    const static std::string defaultValue = std::string();
    if (email_)
        return *email_;
    return defaultValue;
}

const std::shared_ptr<std::string> &Auth::getEmail() const noexcept {
    return email_;
}

void Auth::setEmail(const std::string &pEmail) noexcept {
    email_ = std::make_shared<std::string>(pEmail);
    dirtyFlag_[1] = true;
}

void Auth::setEmail(std::string &&pEmail) noexcept {
    email_ = std::make_shared<std::string>(std::move(pEmail));
    dirtyFlag_[1] = true;
}


const std::string &Auth::getValueOfPassword() const noexcept {
    const static std::string defaultValue = std::string();
    if (password_)
        return *password_;
    return defaultValue;
}

const std::shared_ptr<std::string> &Auth::getPassword() const noexcept {
    return password_;
}

void Auth::setPassword(const std::string &pPassword) noexcept {
    password_ = std::make_shared<std::string>(pPassword);
    dirtyFlag_[2] = true;
}

void Auth::setPassword(std::string &&pPassword) noexcept {
    password_ = std::make_shared<std::string>(std::move(pPassword));
    dirtyFlag_[2] = true;
}


const std::string &Auth::getValueOfAuthToken() const noexcept {
    const static std::string defaultValue = std::string();
    if (authToken_)
        return *authToken_;
    return defaultValue;
}

const std::shared_ptr<std::string> &Auth::getAuthToken() const noexcept {
    return authToken_;
}

void Auth::setAuthToken(const std::string &pAuthToken) noexcept {
    authToken_ = std::make_shared<std::string>(pAuthToken);
    dirtyFlag_[3] = true;
}

void Auth::setAuthToken(std::string &&pAuthToken) noexcept {
    authToken_ = std::make_shared<std::string>(std::move(pAuthToken));
    dirtyFlag_[3] = true;
}


void Auth::setAuthTokenToNull() noexcept {
    authToken_.reset();
    dirtyFlag_[3] = true;
}


const std::string &Auth::getValueOfAccessToken() const noexcept {
    const static std::string defaultValue = std::string();
    if (accessToken_)
        return *accessToken_;
    return defaultValue;
}

const std::shared_ptr<std::string> &Auth::getAccessToken() const noexcept {
    return accessToken_;
}

void Auth::setAccessToken(const std::string &pAccessToken) noexcept {
    accessToken_ = std::make_shared<std::string>(pAccessToken);
    dirtyFlag_[4] = true;
}

void Auth::setAccessToken(std::string &&pAccessToken) noexcept {
    accessToken_ = std::make_shared<std::string>(std::move(pAccessToken));
    dirtyFlag_[4] = true;
}


void Auth::setAccessTokenToNull() noexcept {
    accessToken_.reset();
    dirtyFlag_[4] = true;
}


const std::string &Auth::getValueOfAuthTokenExpireTime() const noexcept {
    const static std::string defaultValue = std::string();
    if (authTokenExpireTime_)
        return *authTokenExpireTime_;
    return defaultValue;
}

const std::shared_ptr<std::string> &Auth::getAuthTokenExpireTime() const noexcept {
    return authTokenExpireTime_;
}

void Auth::setAuthTokenExpireTime(const std::string &pAuthTokenExpireTime) noexcept {
    authTokenExpireTime_ = std::make_shared<std::string>(pAuthTokenExpireTime);
    dirtyFlag_[5] = true;
}

void Auth::setAuthTokenExpireTime(std::string &&pAuthTokenExpireTime) noexcept {
    authTokenExpireTime_ = std::make_shared<std::string>(std::move(pAuthTokenExpireTime));
    dirtyFlag_[5] = true;
}


void Auth::setAuthTokenExpireTimeToNull() noexcept {
    authTokenExpireTime_.reset();
    dirtyFlag_[5] = true;
}


const std::string &Auth::getValueOfAccessTokenExpireTime() const noexcept {
    const static std::string defaultValue = std::string();
    if (accessTokenExpireTime_)
        return *accessTokenExpireTime_;
    return defaultValue;
}

const std::shared_ptr<std::string> &Auth::getAccessTokenExpireTime() const noexcept {
    return accessTokenExpireTime_;
}

void Auth::setAccessTokenExpireTime(const std::string &pAccessTokenExpireTime) noexcept {
    accessTokenExpireTime_ = std::make_shared<std::string>(pAccessTokenExpireTime);
    dirtyFlag_[6] = true;
}

void Auth::setAccessTokenExpireTime(std::string &&pAccessTokenExpireTime) noexcept {
    accessTokenExpireTime_ = std::make_shared<std::string>(std::move(pAccessTokenExpireTime));
    dirtyFlag_[6] = true;
}


void Auth::setAccessTokenExpireTimeToNull() noexcept {
    accessTokenExpireTime_.reset();
    dirtyFlag_[6] = true;
}


const int64_t &Auth::getValueOfQq() const noexcept {
    const static int64_t defaultValue = int64_t();
    if (qq_)
        return *qq_;
    return defaultValue;
}

const std::shared_ptr<int64_t> &Auth::getQq() const noexcept {
    return qq_;
}

void Auth::setQq(const int64_t &pQq) noexcept {
    qq_ = std::make_shared<int64_t>(pQq);
    dirtyFlag_[7] = true;
}


void Auth::updateId(const uint64_t id) {
}

const std::vector<std::string> &Auth::insertColumns() noexcept {
    static const std::vector<std::string> inCols = {
            "email",
            "password",
            "auth_token",
            "access_token",
            "auth_token_expire_time",
            "access_token_expire_time",
            "qq"
    };
    return inCols;
}

void Auth::outputArgs(drogon::orm::internal::SqlBinder &binder) const {
    if (dirtyFlag_[1]) {
        if (getEmail()) {
            binder << getValueOfEmail();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[2]) {
        if (getPassword()) {
            binder << getValueOfPassword();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[3]) {
        if (getAuthToken()) {
            binder << getValueOfAuthToken();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[4]) {
        if (getAccessToken()) {
            binder << getValueOfAccessToken();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[5]) {
        if (getAuthTokenExpireTime()) {
            binder << getValueOfAuthTokenExpireTime();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[6]) {
        if (getAccessTokenExpireTime()) {
            binder << getValueOfAccessTokenExpireTime();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[7]) {
        if (getQq()) {
            binder << getValueOfQq();
        } else {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Auth::updateColumns() const {
    std::vector<std::string> ret;
    if (dirtyFlag_[1]) {
        ret.push_back(getColumnName(1));
    }
    if (dirtyFlag_[2]) {
        ret.push_back(getColumnName(2));
    }
    if (dirtyFlag_[3]) {
        ret.push_back(getColumnName(3));
    }
    if (dirtyFlag_[4]) {
        ret.push_back(getColumnName(4));
    }
    if (dirtyFlag_[5]) {
        ret.push_back(getColumnName(5));
    }
    if (dirtyFlag_[6]) {
        ret.push_back(getColumnName(6));
    }
    if (dirtyFlag_[7]) {
        ret.push_back(getColumnName(7));
    }
    return ret;
}

void Auth::updateArgs(drogon::orm::internal::SqlBinder &binder) const {
    if (dirtyFlag_[1]) {
        if (getEmail()) {
            binder << getValueOfEmail();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[2]) {
        if (getPassword()) {
            binder << getValueOfPassword();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[3]) {
        if (getAuthToken()) {
            binder << getValueOfAuthToken();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[4]) {
        if (getAccessToken()) {
            binder << getValueOfAccessToken();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[5]) {
        if (getAuthTokenExpireTime()) {
            binder << getValueOfAuthTokenExpireTime();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[6]) {
        if (getAccessTokenExpireTime()) {
            binder << getValueOfAccessTokenExpireTime();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[7]) {
        if (getQq()) {
            binder << getValueOfQq();
        } else {
            binder << nullptr;
        }
    }
}

Json::Value Auth::toJson() const {
    Json::Value ret;
    if (getId()) {
        ret["_id"] = (Json::Int64) getValueOfId();
    } else {
        ret["_id"] = Json::Value();
    }
    if (getEmail()) {
        ret["email"] = getValueOfEmail();
    } else {
        ret["email"] = Json::Value();
    }
    if (getPassword()) {
        ret["password"] = getValueOfPassword();
    } else {
        ret["password"] = Json::Value();
    }
    if (getAuthToken()) {
        ret["auth_token"] = getValueOfAuthToken();
    } else {
        ret["auth_token"] = Json::Value();
    }
    if (getAccessToken()) {
        ret["access_token"] = getValueOfAccessToken();
    } else {
        ret["access_token"] = Json::Value();
    }
    if (getAuthTokenExpireTime()) {
        ret["auth_token_expire_time"] = getValueOfAuthTokenExpireTime();
    } else {
        ret["auth_token_expire_time"] = Json::Value();
    }
    if (getAccessTokenExpireTime()) {
        ret["access_token_expire_time"] = getValueOfAccessTokenExpireTime();
    } else {
        ret["access_token_expire_time"] = Json::Value();
    }
    if (getQq()) {
        ret["qq"] = (Json::Int64) getValueOfQq();
    } else {
        ret["qq"] = Json::Value();
    }
    return ret;
}

Json::Value Auth::toMasqueradedJson(
        const std::vector<std::string> &pMasqueradingVector) const {
    Json::Value ret;
    if (pMasqueradingVector.size() == 8) {
        if (!pMasqueradingVector[0].empty()) {
            if (getId()) {
                ret[pMasqueradingVector[0]] = (Json::Int64) getValueOfId();
            } else {
                ret[pMasqueradingVector[0]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[1].empty()) {
            if (getEmail()) {
                ret[pMasqueradingVector[1]] = getValueOfEmail();
            } else {
                ret[pMasqueradingVector[1]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[2].empty()) {
            if (getPassword()) {
                ret[pMasqueradingVector[2]] = getValueOfPassword();
            } else {
                ret[pMasqueradingVector[2]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[3].empty()) {
            if (getAuthToken()) {
                ret[pMasqueradingVector[3]] = getValueOfAuthToken();
            } else {
                ret[pMasqueradingVector[3]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[4].empty()) {
            if (getAccessToken()) {
                ret[pMasqueradingVector[4]] = getValueOfAccessToken();
            } else {
                ret[pMasqueradingVector[4]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[5].empty()) {
            if (getAuthTokenExpireTime()) {
                ret[pMasqueradingVector[5]] = getValueOfAuthTokenExpireTime();
            } else {
                ret[pMasqueradingVector[5]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[6].empty()) {
            if (getAccessTokenExpireTime()) {
                ret[pMasqueradingVector[6]] = getValueOfAccessTokenExpireTime();
            } else {
                ret[pMasqueradingVector[6]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[7].empty()) {
            if (getQq()) {
                ret[pMasqueradingVector[7]] = (Json::Int64) getValueOfQq();
            } else {
                ret[pMasqueradingVector[7]] = Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if (getId()) {
        ret["_id"] = (Json::Int64) getValueOfId();
    } else {
        ret["_id"] = Json::Value();
    }
    if (getEmail()) {
        ret["email"] = getValueOfEmail();
    } else {
        ret["email"] = Json::Value();
    }
    if (getPassword()) {
        ret["password"] = getValueOfPassword();
    } else {
        ret["password"] = Json::Value();
    }
    if (getAuthToken()) {
        ret["auth_token"] = getValueOfAuthToken();
    } else {
        ret["auth_token"] = Json::Value();
    }
    if (getAccessToken()) {
        ret["access_token"] = getValueOfAccessToken();
    } else {
        ret["access_token"] = Json::Value();
    }
    if (getAuthTokenExpireTime()) {
        ret["auth_token_expire_time"] = getValueOfAuthTokenExpireTime();
    } else {
        ret["auth_token_expire_time"] = Json::Value();
    }
    if (getAccessTokenExpireTime()) {
        ret["access_token_expire_time"] = getValueOfAccessTokenExpireTime();
    } else {
        ret["access_token_expire_time"] = Json::Value();
    }
    if (getQq()) {
        ret["qq"] = (Json::Int64) getValueOfQq();
    } else {
        ret["qq"] = Json::Value();
    }
    return ret;
}

bool Auth::validateJsonForCreation(const Json::Value &pJson, std::string &err) {
    if (pJson.isMember("_id")) {
        if (!validJsonOfField(0, "_id", pJson["_id"], err, true))
            return false;
    }
    if (pJson.isMember("email")) {
        if (!validJsonOfField(1, "email", pJson["email"], err, true))
            return false;
    }
    if (pJson.isMember("password")) {
        if (!validJsonOfField(2, "password", pJson["password"], err, true))
            return false;
    }
    if (pJson.isMember("auth_token")) {
        if (!validJsonOfField(3, "auth_token", pJson["auth_token"], err, true))
            return false;
    }
    if (pJson.isMember("access_token")) {
        if (!validJsonOfField(4, "access_token", pJson["access_token"], err, true))
            return false;
    }
    if (pJson.isMember("auth_token_expire_time")) {
        if (!validJsonOfField(5, "auth_token_expire_time", pJson["auth_token_expire_time"], err, true))
            return false;
    }
    if (pJson.isMember("access_token_expire_time")) {
        if (!validJsonOfField(6, "access_token_expire_time", pJson["access_token_expire_time"], err, true))
            return false;
    }
    if (pJson.isMember("qq")) {
        if (!validJsonOfField(7, "qq", pJson["qq"], err, true))
            return false;
    } else {
        err = "The qq column cannot be null";
        return false;
    }
    return true;
}

bool Auth::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                              const std::vector<std::string> &pMasqueradingVector,
                                              std::string &err) {
    if (pMasqueradingVector.size() != 8) {
        err = "Bad masquerading vector";
        return false;
    }
    if (!pMasqueradingVector[0].empty()) {
        if (pJson.isMember(pMasqueradingVector[0])) {
            if (!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
    }
    if (!pMasqueradingVector[1].empty()) {
        if (pJson.isMember(pMasqueradingVector[1])) {
            if (!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
    }
    if (!pMasqueradingVector[2].empty()) {
        if (pJson.isMember(pMasqueradingVector[2])) {
            if (!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                return false;
        }
    }
    if (!pMasqueradingVector[3].empty()) {
        if (pJson.isMember(pMasqueradingVector[3])) {
            if (!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                return false;
        }
    }
    if (!pMasqueradingVector[4].empty()) {
        if (pJson.isMember(pMasqueradingVector[4])) {
            if (!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                return false;
        }
    }
    if (!pMasqueradingVector[5].empty()) {
        if (pJson.isMember(pMasqueradingVector[5])) {
            if (!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                return false;
        }
    }
    if (!pMasqueradingVector[6].empty()) {
        if (pJson.isMember(pMasqueradingVector[6])) {
            if (!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                return false;
        }
    }
    if (!pMasqueradingVector[7].empty()) {
        if (pJson.isMember(pMasqueradingVector[7])) {
            if (!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                return false;
        } else {
            err = "The " + pMasqueradingVector[7] + " column cannot be null";
            return false;
        }
    }
    return true;
}

bool Auth::validateJsonForUpdate(const Json::Value &pJson, std::string &err) {
    if (pJson.isMember("_id")) {
        if (!validJsonOfField(0, "_id", pJson["_id"], err, false))
            return false;
    } else {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if (pJson.isMember("email")) {
        if (!validJsonOfField(1, "email", pJson["email"], err, false))
            return false;
    }
    if (pJson.isMember("password")) {
        if (!validJsonOfField(2, "password", pJson["password"], err, false))
            return false;
    }
    if (pJson.isMember("auth_token")) {
        if (!validJsonOfField(3, "auth_token", pJson["auth_token"], err, false))
            return false;
    }
    if (pJson.isMember("access_token")) {
        if (!validJsonOfField(4, "access_token", pJson["access_token"], err, false))
            return false;
    }
    if (pJson.isMember("auth_token_expire_time")) {
        if (!validJsonOfField(5, "auth_token_expire_time", pJson["auth_token_expire_time"], err, false))
            return false;
    }
    if (pJson.isMember("access_token_expire_time")) {
        if (!validJsonOfField(6, "access_token_expire_time", pJson["access_token_expire_time"], err, false))
            return false;
    }
    if (pJson.isMember("qq")) {
        if (!validJsonOfField(7, "qq", pJson["qq"], err, false))
            return false;
    }
    return true;
}

bool Auth::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector,
                                            std::string &err) {
    if (pMasqueradingVector.size() != 8) {
        err = "Bad masquerading vector";
        return false;
    }
    if (!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0])) {
        if (!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    } else {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if (!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1])) {
        if (!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    if (!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2])) {
        if (!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
            return false;
    }
    if (!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3])) {
        if (!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
            return false;
    }
    if (!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4])) {
        if (!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
            return false;
    }
    if (!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5])) {
        if (!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
            return false;
    }
    if (!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6])) {
        if (!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
            return false;
    }
    if (!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7])) {
        if (!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
            return false;
    }
    return true;
}

bool Auth::validJsonOfField(size_t index,
                            const std::string &fieldName,
                            const Json::Value &pJson,
                            std::string &err,
                            bool isForCreation) {
    switch (index) {
        case 0:
            if (pJson.isNull()) {
                err = "The " + fieldName + " column cannot be null";
                return false;
            }
            if (isForCreation) {
                err = "The automatic primary key cannot be set";
                return false;
            }
            if (!pJson.isInt64()) {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 1:
            if (pJson.isNull()) {
                err = "The " + fieldName + " column cannot be null";
                return false;
            }
            if (!pJson.isString()) {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 2:
            if (pJson.isNull()) {
                err = "The " + fieldName + " column cannot be null";
                return false;
            }
            if (!pJson.isString()) {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 3:
            if (pJson.isNull()) {
                return true;
            }
            if (!pJson.isString()) {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 4:
            if (pJson.isNull()) {
                return true;
            }
            if (!pJson.isString()) {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 5:
            if (pJson.isNull()) {
                return true;
            }
            if (!pJson.isString()) {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 6:
            if (pJson.isNull()) {
                return true;
            }
            if (!pJson.isString()) {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 7:
            if (pJson.isNull()) {
                err = "The " + fieldName + " column cannot be null";
                return false;
            }
            if (!pJson.isInt64()) {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;

        default:
            err = "Internal error in the server";
            return false;
            break;
    }
    return true;
}
