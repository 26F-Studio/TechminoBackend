/**
 *
 *  Data.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Data.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::Techmino;

const std::string Data::Cols::__id = "_id";
const std::string Data::Cols::_email = "email";
const std::string Data::primaryKeyName = "_id";
const bool Data::hasPrimaryKey = true;
const std::string Data::tableName = "data";

const std::vector<typename Data::MetaData> Data::metaData_ = {
        {"_id",   "int64_t",     "bigint", 8, 1, 1, 1},
        {"email", "std::string", "text",   0, 0, 0, 1}
};

const std::string &Data::getColumnName(size_t index) noexcept(false) {
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}

Data::Data(const Row &r, const ssize_t indexOffset) noexcept {
    if (indexOffset < 0) {
        if (!r["_id"].isNull()) {
            Id_ = std::make_shared<int64_t>(r["_id"].as<int64_t>());
        }
        if (!r["email"].isNull()) {
            email_ = std::make_shared<std::string>(r["email"].as<std::string>());
        }
    } else {
        size_t offset = (size_t) indexOffset;
        if (offset + 2 > r.size()) {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if (!r[index].isNull()) {
            Id_ = std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 1;
        if (!r[index].isNull()) {
            email_ = std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Data::Data(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false) {
    if (pMasqueradingVector.size() != 2) {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if (!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0])) {
        dirtyFlag_[0] = true;
        if (!pJson[pMasqueradingVector[0]].isNull()) {
            Id_ = std::make_shared<int64_t>((int64_t) pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if (!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1])) {
        dirtyFlag_[1] = true;
        if (!pJson[pMasqueradingVector[1]].isNull()) {
            email_ = std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
}

Data::Data(const Json::Value &pJson) noexcept(false) {
    if (pJson.isMember("_id")) {
        dirtyFlag_[0] = true;
        if (!pJson["_id"].isNull()) {
            Id_ = std::make_shared<int64_t>((int64_t) pJson["_id"].asInt64());
        }
    }
    if (pJson.isMember("email")) {
        dirtyFlag_[1] = true;
        if (!pJson["email"].isNull()) {
            email_ = std::make_shared<std::string>(pJson["email"].asString());
        }
    }
}

void Data::updateByMasqueradedJson(const Json::Value &pJson,
                                   const std::vector<std::string> &pMasqueradingVector) noexcept(false) {
    if (pMasqueradingVector.size() != 2) {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if (!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0])) {
        if (!pJson[pMasqueradingVector[0]].isNull()) {
            Id_ = std::make_shared<int64_t>((int64_t) pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if (!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1])) {
        dirtyFlag_[1] = true;
        if (!pJson[pMasqueradingVector[1]].isNull()) {
            email_ = std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
}

void Data::updateByJson(const Json::Value &pJson) noexcept(false) {
    if (pJson.isMember("_id")) {
        if (!pJson["_id"].isNull()) {
            Id_ = std::make_shared<int64_t>((int64_t) pJson["_id"].asInt64());
        }
    }
    if (pJson.isMember("email")) {
        dirtyFlag_[1] = true;
        if (!pJson["email"].isNull()) {
            email_ = std::make_shared<std::string>(pJson["email"].asString());
        }
    }
}

const int64_t &Data::getValueOfId() const noexcept {
    const static int64_t defaultValue = int64_t();
    if (Id_)
        return *Id_;
    return defaultValue;
}

const std::shared_ptr<int64_t> &Data::getId() const noexcept {
    return Id_;
}

void Data::setId(const int64_t &pId) noexcept {
    Id_ = std::make_shared<int64_t>(pId);
    dirtyFlag_[0] = true;
}


const typename Data::PrimaryKeyType &Data::getPrimaryKey() const {
    assert(Id_);
    return *Id_;
}

const std::string &Data::getValueOfEmail() const noexcept {
    const static std::string defaultValue = std::string();
    if (email_)
        return *email_;
    return defaultValue;
}

const std::shared_ptr<std::string> &Data::getEmail() const noexcept {
    return email_;
}

void Data::setEmail(const std::string &pEmail) noexcept {
    email_ = std::make_shared<std::string>(pEmail);
    dirtyFlag_[1] = true;
}

void Data::setEmail(std::string &&pEmail) noexcept {
    email_ = std::make_shared<std::string>(std::move(pEmail));
    dirtyFlag_[1] = true;
}


void Data::updateId(const uint64_t id) {
}

const std::vector<std::string> &Data::insertColumns() noexcept {
    static const std::vector<std::string> inCols = {
            "email"
    };
    return inCols;
}

void Data::outputArgs(drogon::orm::internal::SqlBinder &binder) const {
    if (dirtyFlag_[1]) {
        if (getEmail()) {
            binder << getValueOfEmail();
        } else {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Data::updateColumns() const {
    std::vector<std::string> ret;
    if (dirtyFlag_[1]) {
        ret.push_back(getColumnName(1));
    }
    return ret;
}

void Data::updateArgs(drogon::orm::internal::SqlBinder &binder) const {
    if (dirtyFlag_[1]) {
        if (getEmail()) {
            binder << getValueOfEmail();
        } else {
            binder << nullptr;
        }
    }
}

Json::Value Data::toJson() const {
    Json::Value ret;
    if (getId()) {
        ret["_id"] = (Json::Int64) getValueOfId();
    } else {
        ret["_id"] = Json::Value();
    }
    if (getEmail()) {
        ret["email"] = getValueOfEmail();
    } else {
        ret["email"] = Json::Value();
    }
    return ret;
}

Json::Value Data::toMasqueradedJson(
        const std::vector<std::string> &pMasqueradingVector) const {
    Json::Value ret;
    if (pMasqueradingVector.size() == 2) {
        if (!pMasqueradingVector[0].empty()) {
            if (getId()) {
                ret[pMasqueradingVector[0]] = (Json::Int64) getValueOfId();
            } else {
                ret[pMasqueradingVector[0]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[1].empty()) {
            if (getEmail()) {
                ret[pMasqueradingVector[1]] = getValueOfEmail();
            } else {
                ret[pMasqueradingVector[1]] = Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if (getId()) {
        ret["_id"] = (Json::Int64) getValueOfId();
    } else {
        ret["_id"] = Json::Value();
    }
    if (getEmail()) {
        ret["email"] = getValueOfEmail();
    } else {
        ret["email"] = Json::Value();
    }
    return ret;
}

bool Data::validateJsonForCreation(const Json::Value &pJson, std::string &err) {
    if (pJson.isMember("_id")) {
        if (!validJsonOfField(0, "_id", pJson["_id"], err, true))
            return false;
    }
    if (pJson.isMember("email")) {
        if (!validJsonOfField(1, "email", pJson["email"], err, true))
            return false;
    } else {
        err = "The email column cannot be null";
        return false;
    }
    return true;
}

bool Data::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                              const std::vector<std::string> &pMasqueradingVector,
                                              std::string &err) {
    if (pMasqueradingVector.size() != 2) {
        err = "Bad masquerading vector";
        return false;
    }
    if (!pMasqueradingVector[0].empty()) {
        if (pJson.isMember(pMasqueradingVector[0])) {
            if (!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
    }
    if (!pMasqueradingVector[1].empty()) {
        if (pJson.isMember(pMasqueradingVector[1])) {
            if (!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        } else {
            err = "The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
    }
    return true;
}

bool Data::validateJsonForUpdate(const Json::Value &pJson, std::string &err) {
    if (pJson.isMember("_id")) {
        if (!validJsonOfField(0, "_id", pJson["_id"], err, false))
            return false;
    } else {
        err = "The value of primary key must be set in the json object for modify";
        return false;
    }
    if (pJson.isMember("email")) {
        if (!validJsonOfField(1, "email", pJson["email"], err, false))
            return false;
    }
    return true;
}

bool Data::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector,
                                            std::string &err) {
    if (pMasqueradingVector.size() != 2) {
        err = "Bad masquerading vector";
        return false;
    }
    if (!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0])) {
        if (!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    } else {
        err = "The value of primary key must be set in the json object for modify";
        return false;
    }
    if (!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1])) {
        if (!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    return true;
}

bool Data::validJsonOfField(size_t index,
                            const std::string &fieldName,
                            const Json::Value &pJson,
                            std::string &err,
                            bool isForCreation) {
    switch (index) {
        case 0:
            if (pJson.isNull()) {
                err = "The " + fieldName + " column cannot be null";
                return false;
            }
            if (isForCreation) {
                err = "The automatic primary key cannot be set";
                return false;
            }
            if (!pJson.isInt64()) {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 1:
            if (pJson.isNull()) {
                err = "The " + fieldName + " column cannot be null";
                return false;
            }
            if (!pJson.isString()) {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;

        default:
            err = "Internal error in the server";
            return false;
            break;
    }
    return true;
}
